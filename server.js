// ========================
// SERVIDOR COMPLETO Y MEJORADO CON MEJOR MANEJO DE ERRORES - server.js
// ========================

const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const { Anthropic } = require('@anthropic-ai/sdk');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use(express.static(__dirname));

// Ruta principal para servir la aplicaci√≥n
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Cliente de Anthropic (Claude)
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

// Directorio de documentos
const DOCUMENTS_DIR = path.join(__dirname, 'documents');

// Base de datos en memoria para estad√≠sticas y preguntas falladas
let userStats = {
  // topicId: { totalQuestions: 0, correctAnswers: 0, lastStudied: Date, title: string }
};

let failedQuestions = {
  // topicId: { title: string, questions: [{ question, options, correct, explanation, userAnswer, date, id }] }
};

// CONFIGURACI√ìN MEJORADA PARA CLAUDE
const IMPROVED_CLAUDE_CONFIG = {
  maxRetries: 5,              // M√°s reintentos
  baseDelay: 8000,           // Espera inicial m√°s larga
  maxDelay: 30000,           // M√°ximo 30 segundos
  backoffMultiplier: 2,      // Backoff exponencial
  jitterFactor: 0.2          // Factor aleatorio para evitar ataques sincronizados
};

// Configuraci√≥n completa de temas
const TOPIC_CONFIG = {
  "articulos-lec-del-desahucio-1": {
    "title": "ARTICULOS LEC DEL DESAHUCIO (1)",
    "description": "Art√≠culos LEC del Desahucio",
    "files": ["ARTICULOS LEC DEL DESAHUCIO (1).txt"]
  },
  "arts-129-240-lec-1": {
    "title": "Arts 129-240 LEC (1)",
    "description": "Art√≠culos 129-240 LEC",
    "files": ["Arts 129-240 LEC (1).txt"]
  },
  "arts-141-215-lecr-1": {
    "title": "Arts 141-215 Lecr (1)",
    "description": "Art√≠culos 141-215 Lecr",
    "files": ["Arts 141-215 Lecr (1).txt"]
  },
  "arts-179-300-lopj-1": {
    "title": "Arts 179-300 LOPJ (1)",
    "description": "Art√≠culos 179-300 LOPJ",
    "files": ["Arts 179-300 LOPJ (1).txt"]
  },
  "artculos-42-62-ljs-1": {
    "title": "Art√≠culos 42-62 LJS (1)",
    "description": "Art√≠culos 42-62 LJS",
    "files": ["Art√≠culos 42-62 LJS (1).txt"]
  },
  "carta-dos-ciudadanos": {
    "title": "Carta Dos. Ciudadanos",
    "description": "Carta de Derechos de los Ciudadanos",
    "files": ["Carta Dos. Ciudadanos.txt"]
  },
  "ley-coop-jca-intern-2": {
    "title": "Ley Coop Jca. Intern. (2)",
    "description": "Ley de Cooperaci√≥n Jur√≠dica Internacional",
    "files": ["Ley Coop Jca. Intern. (2).txt"]
  },
  "rglto-1-05-cxpx-rglto-1-18-2": {
    "title": "Rglto. 1-05 CXPX (Rglto 1-18) (2)",
    "description": "Reglamento 1-05",
    "files": ["Rglto. 1-05 CXPX (Rglto 1-18) (2).txt"]
  },
  "tema-1": {
    "title": "TEMA 1",
    "description": "Tema 1",
    "files": ["TEMA 1.txt"]
  },
  "tema-10-11-gestin-1": {
    "title": "Tema 10 (11 Gesti√≥n) (1)",
    "description": "Tema 10 Gesti√≥n",
    "files": ["Tema 10 (11 Gesti√≥n) (1).txt"]
  },
  "tema-14-15": {
    "title": "TEMA 14 (15)",
    "description": "Tema 14",
    "files": ["TEMA 14 (15).txt"]
  },
  "tema-14-alt": {
    "title": "TEMA 14 (15) - Alternativo",
    "description": "Tema 14 - Versi√≥n alternativa",
    "files": ["TEMA-14-_15_.txt"]
  },
  "tema-15-16-xestin": {
    "title": "TEMA 15 (√≥ 16 Xesti√≥n)",
    "description": "Tema 15 Gesti√≥n",
    "files": ["TEMA-15-_√≥-16-Xesti√≥n_.txt"]
  },
  "tema-16-aux16-18-19-tra": {
    "title": "Tema 16 (Aux),16-18-19 (Tra)",
    "description": "Tema 16 Auxilio y Tramitaci√≥n",
    "files": ["Tema-16-_Aux__16-18-19-_Tra_.txt"]
  },
  "tema-2-bis-1": {
    "title": "Tema 2 bis (1)",
    "description": "Tema 2 bis",
    "files": ["Tema 2 bis (1).txt"]
  },
  "tema-20-21-tram_-18-auxilio": {
    "title": "Tema 20-21 (Tram)_ 18 (auxilio)",
    "description": "Tema 20-21 Tramitaci√≥n",
    "files": ["Tema-20-21-_Tram__-18-_auxilio_.txt"]
  },
  "tema-22-tram-19-aux-1": {
    "title": "TEMA 22 (Tram)-19 (Aux). (1)",
    "description": "Tema 22 Tramitaci√≥n y Auxilio",
    "files": ["TEMA-22-_Tram_-19-_Aux_.-_1_.txt"]
  },
  "tema-24": {
    "title": "TEMA 24",
    "description": "Tema 24",
    "files": ["TEMA-24.txt"]
  },
  "tema-3-1": {
    "title": "TEMA 3 (1)",
    "description": "Tema 3",
    "files": ["TEMA 3 (1).txt"]
  },
  "tema-4": {
    "title": "TEMA 4",
    "description": "Tema 4",
    "files": ["TEMA 4.txt"]
  },
  "tema-5-2": {
    "title": "TEMA 5 (2)",
    "description": "Tema 5",
    "files": ["TEMA 5 (2).txt"]
  },
  "tema-6": {
    "title": "TEMA 6",
    "description": "Tema 6",
    "files": ["TEMA 6.txt"]
  },
  "tema-7-polo-que-estudiamos": {
    "title": "TEMA 7 (polo que, estudiamos)",
    "description": "Tema 7",
    "files": ["TEMA 7 (polo que, estudiamos).txt"]
  },
  "tema-8-polo-que-estudiamos": {
    "title": "TEMA 8 (polo que, estudiamos)",
    "description": "Tema 8",
    "files": ["TEMA 8 (polo que, estudiamos).txt"]
  },
  "tema-9-auxilio": {
    "title": "TEMA 9 (Auxilio)",
    "description": "Tema 9 Auxilio",
    "files": ["TEMA 9 (Auxilio).txt"]
  },
  "tema-laboral-23-tram-20-auxili": {
    "title": "Tema Laboral 23 (Tram) 20 (Auxilio)",
    "description": "Tema Laboral y Auxilio",
    "files": ["Tema-Laboral-23-_Tram_-20-_Auxilio_.txt"]
  },
  "temas-rexistro-civil-2": {
    "title": "Temas Rexistro Civil (2)",
    "description": "Registro Civil",
    "files": ["Temas Rexistro Civil (2).txt"]
  },
  "temas-rexistro-civil-2-1": {
    "title": "Temas Rexistro Civil (2) (1)",
    "description": "Registro Civil - Parte 2",
    "files": ["Temas-Rexistro-Civil-_2_-_1_.txt"]
  }
};

// ========================
// SISTEMA MEJORADO DE LLAMADAS A CLAUDE
// ========================

function calculateDelay(attempt, config = IMPROVED_CLAUDE_CONFIG) {
  const baseDelay = config.baseDelay;
  const exponentialDelay = baseDelay * Math.pow(config.backoffMultiplier, attempt - 1);
  
  // A√±adir jitter aleatorio para evitar "thundering herd"
  const jitter = exponentialDelay * config.jitterFactor * Math.random();
  const finalDelay = Math.min(exponentialDelay + jitter, config.maxDelay);
  
  return Math.round(finalDelay);
}

async function callClaudeWithImprovedRetry(fullPrompt, config = IMPROVED_CLAUDE_CONFIG) {
  let lastError = null;
  
  for (let attempt = 1; attempt <= config.maxRetries; attempt++) {
    try {
      console.log(`ü§ñ Intento ${attempt}/${config.maxRetries} - Generando preguntas con Claude...`);
      
      const response = await anthropic.messages.create({
        model: "claude-3-5-sonnet-20241022",
        max_tokens: 2700,
        temperature: 0.3,
        messages: [{
          role: "user",
          content: fullPrompt
        }]
      });
      
      console.log(`‚úÖ Respuesta de Claude recibida en intento ${attempt}`);
      return response;
      
    } catch (error) {
      lastError = error;
      console.log(`‚ùå Intento ${attempt} fallido:`, error.status, error.message);
      
      // Si es el √∫ltimo intento, no esperar m√°s
      if (attempt === config.maxRetries) {
        console.log(`üíÄ Todos los ${config.maxRetries} intentos fallaron`);
        break;
      }
      
      // Calcular tiempo de espera inteligente
      const waitTime = calculateDelay(attempt, config);
      
      // Mensajes m√°s informativos seg√∫n el tipo de error
      if (error.status === 529) {
        console.log(`‚è≥ Claude sobrecargado. Esperando ${waitTime/1000}s antes del siguiente intento...`);
      } else if (error.status === 429) {
        console.log(`‚è≥ Rate limit alcanzado. Esperando ${waitTime/1000}s antes del siguiente intento...`);
      } else {
        console.log(`‚è≥ Error ${error.status}. Esperando ${waitTime/1000}s antes del siguiente intento...`);
      }
      
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  
  // Si llegamos aqu√≠, todos los intentos fallaron
  throw lastError;
}

// ========================
// FUNCI√ìN DE PARSING MEJORADA
// ========================

function parseClaudeResponse(responseText) {
  try {
    return JSON.parse(responseText);
  } catch (error) {
    console.log('üîß Intentando extraer JSON de la respuesta...');
    
    let jsonMatch = responseText.match(/```json\n([\s\S]*?)\n```/);
    if (!jsonMatch) {
      jsonMatch = responseText.match(/```\n([\s\S]*?)\n```/);
    }
    
    if (jsonMatch) {
      try {
        return JSON.parse(jsonMatch[1]);
      } catch (e) {
        console.log('‚ùå JSON extra√≠do no v√°lido');
      }
    }
    
    const jsonStart = responseText.indexOf('{');
    const jsonEnd = responseText.lastIndexOf('}');
    
    if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {
      try {
        const jsonStr = responseText.substring(jsonStart, jsonEnd + 1);
        return JSON.parse(jsonStr);
      } catch (e) {
        console.log('‚ùå JSON sin markdown no v√°lido');
      }
    }
    
    console.log('üö® Generando pregunta de emergencia...');
    return {
      questions: [{
        question: "Seg√∫n los principios fundamentales del ordenamiento jur√≠dico, ¬øcu√°l es la funci√≥n esencial del poder judicial?",
        options: [
          "A) Administrar justicia conforme a la Constituci√≥n y las leyes (art. 117 CE)",
          "B) Crear nuevas normas jur√≠dicas seg√∫n las necesidades sociales",
          "C) Ejecutar las decisiones del poder ejecutivo de forma subordinada",
          "D) Supervisar y controlar la actividad del poder legislativo"
        ],
        correct: 0,
        explanation: "La respuesta correcta es A porque el art√≠culo 117 de la Constituci√≥n establece que corresponde exclusivamente a los Juzgados y Tribunales el ejercicio de la potestad jurisdiccional, juzgando y haciendo ejecutar lo juzgado. Las otras opciones son incorrectas porque: B) Los jueces aplican las leyes, no las crean; C) El poder judicial es independiente, no subordinado; D) No tiene funci√≥n de control sobre el legislativo.",
        difficulty: "media",
        page_reference: "Art√≠culo 117 de la Constituci√≥n Espa√±ola"
      }]
    };
  }
}

// PROMPT OPTIMIZADO PARA CLAUDE
const CLAUDE_PROMPT = `Eres un experto en redacci√≥n de preguntas de examen para oposiciones t√©cnicas en el √°mbito judicial.

INSTRUCCIONES CR√çTICAS:
1. Responde √öNICAMENTE con JSON v√°lido
2. NO incluyas texto adicional fuera del JSON
3. NO uses bloques de c√≥digo markdown
4. Genera exactamente {{QUESTION_COUNT}} pregunta(s)

CONDICIONES GENERALES OBLIGATORIAS:
- NO inventes ni extrapoles informaci√≥n: todas las preguntas y opciones deben estar expl√≠citamente fundamentadas en los documentos adjuntos
- Las respuestas incorrectas deben ser plausibles pero contrastadas como falsas o inexactas seg√∫n el texto
- Cada pregunta debe tener una sola opci√≥n correcta claramente identificada
- No repitas enunciados, busca variedad en la formulaci√≥n y el enfoque
- Incluye entre par√©ntesis tras cada respuesta el n√∫mero de p√°gina o secci√≥n del documento donde se fundamenta

DISTRIBUCI√ìN DEL NIVEL DE DIFICULTAD:
- Cuando generes preguntas: 60% dif√≠ciles, 30% medias, 10% sencillas 
- Si generas m√°s de 10: mant√©n proporci√≥n 60% dif√≠ciles, 30% medias, 10% sencillas

DEFINICI√ìN DE NIVELES:
- DIF√çCIL: Requieren an√°lisis, comparaci√≥n, integraci√≥n de conceptos o atenci√≥n a detalles t√©cnicos espec√≠ficos
- MEDIA: Preguntan hechos, clasificaciones, procedimientos con alguna complejidad conceptual
- SENCILLA: Pregunta directa sobre definiciones, conceptos b√°sicos claramente establecidos

FORMATO JSON OBLIGATORIO (responde solo con esto):

{
  "questions": [
    {
      "question": "Texto de la pregunta",
      "options": [
        "A) Opci√≥n 1 (referencia espec√≠fica del documento)",
        "B) Opci√≥n 2 (referencia espec√≠fica del documento)", 
        "C) Opci√≥n 3 (referencia espec√≠fica del documento)",
        "D) Opci√≥n 4 (referencia espec√≠fica del documento)"
      ],
      "correct": 2,
      "explanation": "La respuesta correcta es C porque... (p√°gina/art√≠culo X). Las otras opciones son incorrectas porque: A) ...  B) ...  D) ...",
      "difficulty": "dif√≠cil",
      "page_reference": "Art√≠culo X, p√°gina Y del documento"
    }
  ]
}

CONTENIDO A ANALIZAR:
{{CONTENT}}

IMPORTANTE: Basa todas las preguntas y opciones EXCLUSIVAMENTE en el contenido proporcionado. No agregues informaci√≥n externa. Responde SOLO con el JSON v√°lido para {{QUESTION_COUNT}} pregunta(s).`;

// ========================
// FUNCIONES PARA MANEJO DE ARCHIVOS
// ========================

async function readFile(filePath) {
  const ext = path.extname(filePath).toLowerCase();
  
  try {
    if (ext === '.txt') {
      return await fs.readFile(filePath, 'utf8');
    } else {
      return '[FORMATO NO SOPORTADO - Solo archivos .txt]';
    }
  } catch (error) {
    console.error(`Error leyendo ${filePath}:`, error.message);
    throw error;
  }
}

async function ensureDocumentsDirectory() {
  try {
    await fs.access(DOCUMENTS_DIR);
  } catch (error) {
    console.log('üìÅ Creando directorio de documentos...');
    await fs.mkdir(DOCUMENTS_DIR, { recursive: true });
  }
}

async function getDocumentsByTopics(topics) {
  let allContent = '';
  let successCount = 0;
  
  for (const topic of topics) {
    const topicConfig = TOPIC_CONFIG[topic];
    if (!topicConfig) continue;
    
    allContent += `\n\n=== ${topicConfig.title} ===\n\n`;
    
    let foundFile = false;
    
    for (const fileName of topicConfig.files) {
      const filePath = path.join(DOCUMENTS_DIR, fileName);
      
      try {
        const content = await readFile(filePath);
        if (content && !content.includes('[FORMATO NO SOPORTADO')) {
          allContent += `--- ${fileName} ---\n${content}\n\n`;
          foundFile = true;
          successCount++;
          console.log(`‚úÖ Le√≠do: ${fileName}`);
        } else {
          console.log(`‚ö†Ô∏è  Contenido vac√≠o o no soportado: ${fileName}`);
        }
        break;
      } catch (error) {
        console.log(`‚ùå Error leyendo: ${fileName} - ${error.message}`);
        continue;
      }
    }
    
    if (!foundFile) {
      allContent += `--- ${topicConfig.title} ---\n[NO SE PUDO LEER EL ARCHIVO PARA ESTE TEMA]\n\n`;
    }
  }
  
  console.log(`üìä Archivos procesados exitosamente: ${successCount}/${topics.length}`);
  return allContent;
}

// ========================
// FUNCIONES DE ESTAD√çSTICAS MEJORADAS
// ========================

function updateUserStats(topicId, isCorrect) {
  const topicConfig = TOPIC_CONFIG[topicId];
  
  if (!userStats[topicId]) {
    userStats[topicId] = {
      title: topicConfig ? topicConfig.title : 'Tema desconocido',
      totalQuestions: 0,
      correctAnswers: 0,
      lastStudied: new Date()
    };
  }
  
  userStats[topicId].totalQuestions++;
  if (isCorrect) {
    userStats[topicId].correctAnswers++;
  }
  userStats[topicId].lastStudied = new Date();
  userStats[topicId].accuracy = Math.round((userStats[topicId].correctAnswers / userStats[topicId].totalQuestions) * 100);
}

function addFailedQuestion(topicId, questionData, userAnswer) {
  const topicConfig = TOPIC_CONFIG[topicId];
  
  if (!failedQuestions[topicId]) {
    failedQuestions[topicId] = {
      title: topicConfig ? topicConfig.title : 'Tema desconocido',
      questions: []
    };
  }
  
  failedQuestions[topicId].questions.push({
    ...questionData,
    userAnswer,
    date: new Date(),
    id: Date.now() + Math.random()
  });
}

function removeFailedQuestion(topicId, questionId) {
  if (failedQuestions[topicId]) {
    failedQuestions[topicId].questions = failedQuestions[topicId].questions.filter(q => q.id !== questionId);
    
    // Si no quedan preguntas falladas para este tema, eliminar el tema
    if (failedQuestions[topicId].questions.length === 0) {
      delete failedQuestions[topicId];
    }
  }
}

// ========================
// RUTAS DE LA API
// ========================

// Obtener temas disponibles
app.get('/api/topics', async (req, res) => {
  try {
    const topics = Object.keys(TOPIC_CONFIG);
    res.json(topics);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener temas' });
  }
});

// RUTA PRINCIPAL MEJORADA PARA GENERAR EXAMEN
app.post('/api/generate-exam', async (req, res) => {
  try {
    const { topics, questionCount = 1 } = req.body;
    
    if (!topics || topics.length === 0) {
      return res.status(400).json({ error: 'Debes seleccionar al menos un tema' });
    }
    
    console.log('üìö Leyendo documentos para temas:', topics);
    
    const documentContent = await getDocumentsByTopics(topics);
    
    if (!documentContent.trim() || documentContent.includes('[NO SE PUDO LEER EL ARCHIVO')) {
      return res.status(404).json({ 
        error: 'No se pudo leer el contenido de los temas seleccionados. Verifica que los archivos .txt est√©n en la carpeta documents/' 
      });
    }
    
    const fullPrompt = CLAUDE_PROMPT
      .replace('{{CONTENT}}', documentContent)
      .replace(/{{QUESTION_COUNT}}/g, questionCount);
    
    console.log('ü§ñ Iniciando generaci√≥n de preguntas...');
    
    // USAR LA NUEVA FUNCI√ìN MEJORADA CON REINTENTOS INTELIGENTES
    const response = await callClaudeWithImprovedRetry(fullPrompt);
    
    let questionsData;
    try {
      const responseText = response.content[0].text;
      console.log('üìù Respuesta de Claude recibida');
      console.log('üîç Primeros 200 caracteres:', responseText.substring(0, 200));
      
      questionsData = parseClaudeResponse(responseText);
      
      if (!questionsData || !questionsData.questions || questionsData.questions.length === 0) {
        throw new Error('No se generaron preguntas v√°lidas');
      }
      
      // Validar y corregir estructura de cada pregunta
      questionsData.questions.forEach((q, index) => {
        if (!q.question || !q.options || !Array.isArray(q.options) || q.options.length !== 4) {
          console.log(`‚ö†Ô∏è  Pregunta ${index + 1} tiene formato incorrecto, corrigiendo...`);
          q.options = q.options || [
            "A) Opci√≥n por defecto 1",
            "B) Opci√≥n por defecto 2", 
            "C) Opci√≥n por defecto 3",
            "D) Opci√≥n por defecto 4"
          ];
        }
        
        q.correct = q.correct !== undefined ? q.correct : 0;
        q.explanation = q.explanation || "Explicaci√≥n no disponible por error en la generaci√≥n.";
        q.difficulty = q.difficulty || "media";
        q.page_reference = q.page_reference || "Referencia no disponible";
      });
      
    } catch (parseError) {
      console.error('‚ùå Error parsing Claude response:', parseError.message);
      questionsData = {
        questions: [{
          question: "De acuerdo con los principios constitucionales del ordenamiento jur√≠dico espa√±ol, ¬øcu√°l es el fundamento de la independencia judicial?",
          options: [
            "A) La inamovilidad de los jueces y su sometimiento √∫nicamente al imperio de la ley (art. 117.1 CE)",
            "B) La dependencia directa del Consejo General del Poder Judicial en todas las decisiones",
            "C) La subordinaci√≥n jer√°rquica al Ministerio de Justicia en materia de sentencias",
            "D) La facultad de interpretar libremente las leyes sin limitaci√≥n constitucional"
          ],
          correct: 0,
          explanation: "La respuesta correcta es A porque el art√≠culo 117.1 CE establece que la justicia emana del pueblo y se administra por Jueces y Tribunales independientes, inamovibles, responsables y sometidos √∫nicamente al imperio de la ley.",
          difficulty: "dif√≠cil",
          page_reference: "Art√≠culo 117.1 de la Constituci√≥n Espa√±ola"
        }]
      };
    }
    
    const examId = Date.now();
    
    console.log(`‚úÖ Examen generado: ${questionsData.questions.length} preguntas`);
    
    res.json({
      examId,
      questions: questionsData.questions,
      topics,
      questionCount: questionsData.questions.length
    });
    
  } catch (error) {
    console.error('‚ùå Error generando examen:', error);
    
    if (error.status === 529) {
      return res.status(503).json({ 
        error: 'Claude est√° temporalmente sobrecargado. La aplicaci√≥n seguir√° intentando autom√°ticamente.',
        retryable: true,
        waitTime: 5000
      });
    }
    
    if (error.status === 429) {
      return res.status(429).json({ 
        error: 'L√≠mite de solicitudes alcanzado. La aplicaci√≥n reintentar√° autom√°ticamente.',
        retryable: true,
        waitTime: 8000
      });
    }
    
    return res.status(500).json({ 
      error: 'Error interno del servidor. La aplicaci√≥n reintentar√° autom√°ticamente.',
      retryable: true,
      waitTime: 3000,
      details: error.message
    });
  }
});

// Registrar respuesta del usuario
app.post('/api/record-answer', (req, res) => {
  try {
    const { topicId, questionData, userAnswer, isCorrect } = req.body;
    
    // Actualizar estad√≠sticas
    updateUserStats(topicId, isCorrect);
    
    // Si es incorrecta, a√±adir a preguntas falladas
    if (!isCorrect) {
      addFailedQuestion(topicId, questionData, userAnswer);
    }
    
    res.json({ 
      success: true, 
      stats: userStats[topicId] 
    });
    
  } catch (error) {
    console.error('‚ùå Error registrando respuesta:', error);
    res.status(500).json({ error: 'Error al registrar respuesta' });
  }
});

// Obtener estad√≠sticas del usuario
app.get('/api/user-stats', (req, res) => {
  try {
    const statsWithTitles = {};
    
    Object.entries(userStats).forEach(([topicId, stats]) => {
      if (TOPIC_CONFIG[topicId]) {
        statsWithTitles[topicId] = {
          ...stats,
          title: TOPIC_CONFIG[topicId].title,
          accuracy: stats.totalQuestions > 0 ? 
            Math.round((stats.correctAnswers / stats.totalQuestions) * 100) : 0
        };
      }
    });
    
    res.json(statsWithTitles);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener estad√≠sticas' });
  }
});

// Obtener preguntas falladas
app.get('/api/failed-questions', (req, res) => {
  try {
    const failedWithTitles = {};
    
    Object.entries(failedQuestions).forEach(([topicId, topicData]) => {
      if (TOPIC_CONFIG[topicId] && topicData.questions.length > 0) {
        failedWithTitles[topicId] = {
          title: TOPIC_CONFIG[topicId].title,
          questions: topicData.questions
        };
      }
    });
    
    res.json(failedWithTitles);
  } catch (error) {
    res.status(500).json({ error: 'Error al obtener preguntas falladas' });
  }
});

// Marcar pregunta fallada como resuelta
app.post('/api/resolve-failed-question', (req, res) => {
  try {
    const { topicId, questionId } = req.body;
    
    removeFailedQuestion(topicId, questionId);
    
    res.json({ success: true });
  } catch (error) {
    console.error('‚ùå Error resolviendo pregunta fallada:', error);
    res.status(500).json({ error: 'Error al resolver pregunta fallada' });
  }
});

// Obtener estado de documentos
app.get('/api/documents-status', async (req, res) => {
  try {
    const status = {};
    
    for (const [topicId, config] of Object.entries(TOPIC_CONFIG)) {
      status[topicId] = {
        title: config.title,
        description: config.description,
        files: []
      };
      
      for (const fileName of config.files) {
        const filePath = path.join(DOCUMENTS_DIR, fileName);
        try {
          await fs.access(filePath);
          status[topicId].files.push({ name: fileName, exists: true });
        } catch {
          status[topicId].files.push({ name: fileName, exists: false });
        }
      }
    }
    
    res.json(status);
  } catch (error) {
    console.error('‚ùå Error verificando documentos:', error);
    res.status(500).json({ error: 'Error al verificar documentos' });
  }
});

// Ruta de salud del servidor mejorada
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Servidor funcionando correctamente',
    timestamp: new Date().toISOString(),
    documentsDir: DOCUMENTS_DIR,
    topics: Object.keys(TOPIC_CONFIG).length,
    supportedFormats: ['.txt'],
    availableTopics: Object.keys(TOPIC_CONFIG).length,
    userStats: Object.keys(userStats).length,
    failedQuestions: Object.keys(failedQuestions).length,
    claudeConfig: {
      maxRetries: IMPROVED_CLAUDE_CONFIG.maxRetries,
      baseDelay: IMPROVED_CLAUDE_CONFIG.baseDelay + 'ms',
      maxDelay: IMPROVED_CLAUDE_CONFIG.maxDelay + 'ms',
      backoffMultiplier: IMPROVED_CLAUDE_CONFIG.backoffMultiplier,
      jitterFactor: IMPROVED_CLAUDE_CONFIG.jitterFactor
    },
    features: {
      intelligentRetries: true,
      exponentialBackoff: true,
      jitterPrevention: true,
      statisticsTracking: true,
      failedQuestionsReview: true,
      documentStatusCheck: true,
      errorHandling: 'improved'
    }
  });
});

// Ruta adicional para limpiar estad√≠sticas (√∫til para desarrollo/testing)
app.post('/api/clear-stats', (req, res) => {
  try {
    userStats = {};
    failedQuestions = {};
    
    console.log('üßπ Estad√≠sticas y preguntas falladas limpiadas');
    
    res.json({ 
      success: true, 
      message: 'Todas las estad√≠sticas han sido limpiadas',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Error limpiando estad√≠sticas:', error);
    res.status(500).json({ error: 'Error al limpiar estad√≠sticas' });
  }
});

// Ruta para obtener informaci√≥n detallada de un tema espec√≠fico
app.get('/api/topic/:topicId', async (req, res) => {
  try {
    const { topicId } = req.params;
    const topicConfig = TOPIC_CONFIG[topicId];
    
    if (!topicConfig) {
      return res.status(404).json({ error: 'Tema no encontrado' });
    }
    
    // Verificar estado de archivos
    const fileStatus = [];
    for (const fileName of topicConfig.files) {
      const filePath = path.join(DOCUMENTS_DIR, fileName);
      try {
        await fs.access(filePath);
        const stats = await fs.stat(filePath);
        fileStatus.push({ 
          name: fileName, 
          exists: true,
          size: stats.size,
          lastModified: stats.mtime
        });
      } catch {
        fileStatus.push({ name: fileName, exists: false });
      }
    }
    
    // Obtener estad√≠sticas del usuario para este tema
    const userTopicStats = userStats[topicId] || null;
    const userFailedQuestions = failedQuestions[topicId] || null;
    
    res.json({
      id: topicId,
      ...topicConfig,
      fileStatus,
      userStats: userTopicStats,
      failedQuestions: userFailedQuestions,
      available: fileStatus.some(f => f.exists)
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n del tema:', error);
    res.status(500).json({ error: 'Error al obtener informaci√≥n del tema' });
  }
});

// Middleware de manejo de errores mejorado
app.use((error, req, res, next) => {
  console.error('‚ùå Error no manejado:', error);
  
  if (error.type === 'entity.parse.failed') {
    return res.status(400).json({ 
      error: 'JSON mal formado en la solicitud',
      details: 'Verifica que el contenido de la solicitud sea JSON v√°lido'
    });
  }
  
  if (error.code === 'ENOENT') {
    return res.status(404).json({ 
      error: 'Archivo o directorio no encontrado',
      details: error.path
    });
  }
  
  return res.status(500).json({ 
    error: 'Error interno del servidor',
    message: 'Se ha producido un error inesperado',
    timestamp: new Date().toISOString()
  });
});

// Middleware para rutas no encontradas
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Ruta no encontrada',
    path: req.originalUrl,
    method: req.method,
    availableRoutes: [
      'GET /api/health',
      'GET /api/topics',
      'GET /api/topic/:topicId',
      'GET /api/documents-status',
      'GET /api/user-stats',
      'GET /api/failed-questions',
      'POST /api/generate-exam',
      'POST /api/record-answer',
      'POST /api/resolve-failed-question',
      'POST /api/clear-stats'
    ]
  });
});

// ========================
// INICIALIZACI√ìN MEJORADA
// ========================

async function startServer() {
  try {
    // Verificar que tenemos la API key de Anthropic
    if (!process.env.ANTHROPIC_API_KEY) {
      console.error('‚ùå ANTHROPIC_API_KEY no encontrada en variables de entorno');
      console.log('üí° Crea un archivo .env con: ANTHROPIC_API_KEY=tu_api_key_aqui');
      process.exit(1);
    }
    
    // Crear directorio de documentos si no existe
    await ensureDocumentsDirectory();
    
    // Verificar cu√°ntos documentos est√°n disponibles
    let availableFiles = 0;
    let totalFiles = 0;
    
    for (const [topicId, config] of Object.entries(TOPIC_CONFIG)) {
      for (const fileName of config.files) {
        totalFiles++;
        const filePath = path.join(DOCUMENTS_DIR, fileName);
        try {
          await fs.access(filePath);
          availableFiles++;
        } catch {
          // Archivo no existe
        }
      }
    }
    
    // Iniciar servidor
app.listen(port, '0.0.0.0', () => {
  console.log('\nüöÄ ========================================');
  console.log('   SERVIDOR DE OPOSICIONES INICIADO');
  console.log('========================================');
  console.log(`üì° Puerto: ${port}`);
  console.log(`ü§ñ Claude API: Configurada`);
  console.log(`üìÅ Documentos: ${DOCUMENTS_DIR}`);
  console.log(`üìö Temas configurados: ${Object.keys(TOPIC_CONFIG).length}`);
  console.log(`üìÑ Archivos disponibles: ${availableFiles}/${totalFiles}`);
  console.log(`üîÑ Reintentos inteligentes: ‚úÖ ${IMPROVED_CLAUDE_CONFIG.maxRetries} intentos`);
  console.log(`‚è±Ô∏è  Backoff exponencial: ‚úÖ ${IMPROVED_CLAUDE_CONFIG.baseDelay}ms-${IMPROVED_CLAUDE_CONFIG.maxDelay}ms`);
  console.log(`üéØ Anti-thundering herd: ‚úÖ Jitter ${IMPROVED_CLAUDE_CONFIG.jitterFactor}`);
  console.log(`üìä Estad√≠sticas: ‚úÖ Seguimiento completo`);
  console.log(`üîÑ Sistema de repaso: ‚úÖ Preguntas falladas`);
  console.log(`\n‚úÖ Aplicaci√≥n disponible en: ${process.env.RAILWAY_STATIC_URL || `http://localhost:${port}`}`);
  console.log(`üè• Salud del servidor: ${process.env.RAILWAY_STATIC_URL || `http://localhost:${port}`}/api/health`);
  
  if (availableFiles === 0) {
    console.log('\n‚ö†Ô∏è  ADVERTENCIA: No se encontraron archivos de documentos');
    console.log('üìù Coloca tus archivos .txt en la carpeta: documents/');
    console.log('üéØ El servidor funcionar√° en modo demostraci√≥n');
  } else if (availableFiles < totalFiles) {
    console.log(`\n‚ö†Ô∏è  INFORMACI√ìN: ${totalFiles - availableFiles} archivos no encontrados`);
    console.log('üìù Algunos temas estar√°n en modo demostraci√≥n');
  } else {
    console.log('\nüéâ ¬°Todos los archivos est√°n disponibles!');
  }
  
  console.log('\nüìã Temas configurados:');
  Object.entries(TOPIC_CONFIG).forEach(([id, config]) => {
    console.log(`   ‚Ä¢ ${config.title}`);
  });
  
  console.log('\nüéØ ¬°Sistema listo para generar ex√°menes con seguimiento completo!');
  console.log('========================================\n');
});

// Manejo graceful de cierre del servidor
process.on('SIGINT', () => {
  console.log('\nüõë Cerrando servidor...');
  console.log('üìä Estad√≠sticas finales:');
  console.log(`   ‚Ä¢ Usuarios con estad√≠sticas: ${Object.keys(userStats).length}`);
  console.log(`   ‚Ä¢ Preguntas falladas guardadas: ${Object.values(failedQuestions).reduce((acc, topic) => acc + topic.questions.length, 0)}`);
  console.log('‚úÖ Servidor cerrado correctamente');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë Se√±al SIGTERM recibida, cerrando servidor...');
  process.exit(0);
});

// Iniciar el servidor
startServer();